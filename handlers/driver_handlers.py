from telegram import Update
from telegram.ext import (
    ConversationHandler,
    MessageHandler,
    Filters,
    CommandHandler
)
from services.database_service import create_trip, get_user_role
from utils.validators import validate_date, validate_time, validate_seats, sanitize_input
from datetime import datetime
import logging

logger = logging.getLogger(__name__)
DEPARTURE_DATE, DEPARTURE_TIME, SEATS, ROUTE = range(4)

def start_create_trip(update: Update, context):
    user_id = update.effective_user.id
    if get_user_role(user_id) != "driver":
        update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π!")
        return ConversationHandler.END
    
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    return DEPARTURE_DATE

def process_departure_date(update: Update, context):
    date_str = sanitize_input(update.message.text)
    if not validate_date(date_str):
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!")
        return DEPARTURE_DATE
    
    context.user_data['date'] = date_str
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ß–ß:–ú–ú):")
    return DEPARTURE_TIME

def process_departure_time(update: Update, context):
    time_str = sanitize_input(update.message.text)
    if not validate_time(time_str):
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!")
        return DEPARTURE_TIME
    
    try:
        full_datetime = datetime.strptime(
            f"{context.user_data['date']} {time_str}", 
            "%d.%m.%Y %H:%M"
        )
        context.user_data['departure_time'] = full_datetime
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:")
        return SEATS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        update.message.reply_text("‚ö† –û—à–∏–±–∫–∞! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

def process_seats(update: Update, context):
    seats = sanitize_input(update.message.text)
    if not validate_seats(seats):
        update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10!")
        return SEATS
    
    context.user_data['seats'] = int(seats)
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞-–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥):")
    return ROUTE

def process_route(update: Update, context):
    route = sanitize_input(update.message.text)
    try:
        create_trip(
            driver_id=update.effective_user.id,
            departure_time=context.user_data['departure_time'],
            seats=context.user_data['seats'],
            route=route
        )
        update.message.reply_text("‚úÖ –†–µ–π—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π—Å–∞: {e}")
        update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–π—Å–∞!")
    
    return ConversationHandler.END

driver_conversation = ConversationHandler(
    entry_points=[CommandHandler('create_trip', start_create_trip)],
    states={
        DEPARTURE_DATE: [MessageHandler(Filters.text, process_departure_date)],
        DEPARTURE_TIME: [MessageHandler(Filters.text, process_departure_time)],
        SEATS: [MessageHandler(Filters.text, process_seats)],
        ROUTE: [MessageHandler(Filters.text, process_route)]
    },
    fallbacks=[CommandHandler('cancel', lambda u, c: ConversationHandler.END)]
)