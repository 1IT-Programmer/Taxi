from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackQueryHandler,
)
from services.database_service import (
    search_trips,
    book_seat,
    get_trip_details,
    get_user_by_id,
    send_support_message,
)
from utils.validators import validate_date, sanitize_input
from utils.keyboards import get_passenger_keyboard
from config import Config
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

SEARCH_DATE, SELECT_TRIP, CONFIRM_BOOKING, SUPPORT_MESSAGE = range(4)

def start_passenger(update: Update, context):
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_passenger_keyboard()
    )
    return ConversationHandler.END

def search_trips_command(update: Update, context):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    return SEARCH_DATE

def process_search_date(update: Update, context):
    date_str = sanitize_input(update.message.text)
    
    if not validate_date(date_str):
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return SEARCH_DATE

    try:
        trips = search_trips(date_str)
        if not trips:
            update.message.reply_text("üö´ –†–µ–π—Å–æ–≤ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return ConversationHandler.END

        keyboard = [
            [InlineKeyboardButton(
                f"{trip.route} | {trip.departure_time.strftime('%d.%m %H:%M')}",
                callback_data=f"trip_{trip.id}"
            )] 
            for trip in trips
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text("üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–π—Å—ã:", reply_markup=reply_markup)
        return SELECT_TRIP

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        update.message.reply_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

def select_trip(update: Update, context):
    query = update.callback_query
    trip_id = int(query.data.split("_")[1])
    context.user_data["trip_id"] = trip_id
    
    trip = get_trip_details(trip_id)
    if trip.seats <= 0:
        query.edit_message_text("üòû –í—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã.")
        return ConversationHandler.END

    driver = get_user_by_id(trip.driver_id)
    message = (
        f"üöó –†–µ–π—Å: {trip.route}\n"
        f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {trip.departure_time.strftime('%d.%m.%Y %H:%M')}\n"
        f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {driver.full_name}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {driver.phone}\n"
        f"ü™ë –°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞: {trip.seats}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="confirm_yes")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="confirm_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(message, reply_markup=reply_markup)
    return CONFIRM_BOOKING

def confirm_booking(update: Update, context):
    query = update.callback_query
    if query.data == "confirm_yes":
        trip_id = context.user_data["trip_id"]
        user_id = update.effective_user.id
        
        try:
            book_seat(trip_id, user_id)
            query.edit_message_text("üéâ –ú–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            query.edit_message_text("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ.")
    else:
        query.edit_message_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    return ConversationHandler.END

def start_support(update: Update, context):
    update.message.reply_text("‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")
    return SUPPORT_MESSAGE

def process_support(update: Update, context):
    message = sanitize_input(update.message.text)
    user_id = update.effective_user.id
    
    try:
        send_support_message(user_id, message)
        for admin_id in Config.ADMIN_IDS:
            context.bot.send_message(
                admin_id,
                f"üÜò –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n{message}"
            )
        update.message.reply_text("üì© –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
        update.message.reply_text("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    
    return ConversationHandler.END

passenger_conversation = ConversationHandler(
    entry_points=[
        CommandHandler("menu", start_passenger),
        CommandHandler("search", search_trips_command),
        CommandHandler("support", start_support)
    ],
    states={
        SEARCH_DATE: [MessageHandler(Filters.text & ~Filters.command, process_search_date)],
        SELECT_TRIP: [CallbackQueryHandler(select_trip)],
        CONFIRM_BOOKING: [CallbackQueryHandler(confirm_booking)],
        SUPPORT_MESSAGE: [MessageHandler(Filters.text & ~Filters.command, process_support)]
    },
    fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)]
)